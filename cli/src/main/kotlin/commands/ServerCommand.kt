/*
 * ðŸª¶ Hazel: Minimal, and fast HTTP proxy to host files from any cloud storage provider.
 * Copyright 2022-2023 Noelware <team@noelware.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.noelware.hazel.cli.commands

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.parameters.options.option
import com.github.ajalt.clikt.parameters.types.file
import com.github.ajalt.mordant.rendering.TextColors.*
import com.github.ajalt.mordant.rendering.TextColors.Companion.rgb
import com.github.ajalt.mordant.rendering.TextStyles.*
import com.github.ajalt.mordant.terminal.Terminal
import org.noelware.hazel.cli.logger
import org.noelware.hazel.server.Bootstrap
import java.io.File

class ServerCommand(private val terminal: Terminal): CliktCommand(
    "Runs the API server",
    name = "server",
    invokeWithoutSubcommand = true
) {
    private val logbackPath: File? by option(
        "--logback-config", "-lc",
        help = "Configuration file for customizing Hazel's logging system",
        envvar = "HAZEL_LOGBACK_CONFIG_PATH"
    ).file(
        mustExist = true,
        canBeFile = true,
        canBeDir = false,
        mustBeWritable = true,
        mustBeReadable = true,
        canBeSymlink = true
    )

    private val config: File? by option(
        "--config", "-c",
        help = "The configuration path to use",
        envvar = "HAZEL_CONFIG_PATH"
    ).file(
        mustExist = false,
        canBeFile = true,
        canBeDir = false,
        mustBeWritable = true,
        mustBeReadable = true,
        canBeSymlink = true
    )

    override fun run() {
        val bannerColour = bold + rgb("#d4abd8")
        terminal.println(gray("+~+~+~+~+~+~+~+~+~+~+~+~+~+"))
        terminal.println("${gray("+")} ${bannerColour("_   _               _  ")} ${gray("+")}")
        terminal.println("${gray("+")} ${bannerColour("| | | | __ _ _______| |")} ${gray("+")}")
        terminal.println("${gray("+")} ${bannerColour("| |_| |/ _` |_  / _ \\ |")} ${gray("+")}")
        terminal.println("${gray("+")} ${bannerColour("|  _  | (_| |/ /  __/ |")} ${gray("+")}")
        terminal.println("${gray("+")} ${bannerColour("|_| |_|\\__,_/___\\___|_|")} ${gray("+")}")
        terminal.println(gray("+~+~+~+~+~+~+~+~+~+~+~+~+~+"))

        if (logbackPath != null && logbackPath!!.exists()) {
            System.getProperty("-Dorg.noelware.hazel.logback.config", logbackPath.toString())
        }

        val configPath = if (config != null) {
            config!!
        } else {
            File("./config.yml")
        }

        if (!configPath.exists()) {
            terminal.logger.warn("Configuration file at [$configPath] doesn't exist! Creating...")
            configPath.writeText(
                """
                |# This configuration file was generated by `hazel server`
                |
                |storage:
                |  filesystem:
                |    directory: /var/lib/noelware/hazel/data
                """.trimMargin("|")
            )
        }

        Bootstrap.run(configPath)
    }
}
