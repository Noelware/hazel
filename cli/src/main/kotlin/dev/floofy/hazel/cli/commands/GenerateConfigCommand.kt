package dev.floofy.hazel.cli.commands

import dev.floofy.hazel.cli.HazelTerminal
import org.noelware.ai.AiCommand
import org.noelware.ai.AiPhase
import java.io.File

object GenerateConfigCommand: AiCommand(
    "generate",
    "Generates a configuration file in [DEST]."
) {
    override fun run(args: List<String>): AiPhase {
        val path = args.firstOrNull()
        if (path == null) {
            HazelTerminal.logError("You must specify a path.")
            return AiPhase.FINISHED
        }

        val actualPath = when {
            path.startsWith("./") -> System.getProperty("user.dir") + path.replaceFirstChar { "" }
            path.startsWith("~/") -> System.getProperty("user.home") + path
            else -> path
        }

        if (!File(actualPath).isDirectory) {
            HazelTerminal.logWarn("Path '$actualPath' was not a directory.")
            return AiPhase.FINISHED
        }

        val actualFile = File(actualPath + "config.toml")

        HazelTerminal.logInfo("Creating configuration file in $actualPath/config.toml...")
        actualFile.mkdirs()

        val config = """
        |# This is the default configuration that was generated by `hazel generate`!
        |
        |frontend = false
        |
        |[keystore]
        |path = "./data/keystore.jks"
        |
        |[storage]
        |class = "filesystem"
        |
        |[storage.filesystem]
        |directory = "./data"
        """.trimMargin()

        actualFile.writeBytes(config.toByteArray())
        HazelTerminal.logInfo("Your new configuration has been placed in $actualPath/config.toml!")

        return AiPhase.FINISHED
    }
}
