# ðŸª¶ Hazel: Easy to use read-only proxy to map objects to URLs
# Copyright 2022-2025 Noelware, LLC. <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release
on:
    release:
        types:
            - published
permissions:
    packages: write
    contents: write
jobs:
    binary:
        name: "Build / ${{matrix.target}}"
        runs-on: ${{matrix.runner}}
        if: github.repository == 'Noelware/hazel'
        env:
            CARGOFLAGS: "-Zbuild-std=std,panic_abort -Zbuild-std-features=optimize_for_size,panic_immediate_abort,backtrace"
        strategy:
            fail-fast: true
            matrix:
                target: [
                    x86_64-unknown-linux-gnu,  # Linux (x86_64)
                    aarch64-unknown-linux-gnu, # Linux (aarch64)
                    x86_64-apple-darwin,       # macOS (Intel)
                    aarch64-apple-darwin,      # macOS (M1)
                    x86_64-pc-windows-msvc     # Windows (x86_64)
                ]

                include:
                    - target: x86_64-unknown-linux-gnu
                      runner: ubuntu-24.04
                      buildflags: ""
                      rustflags: "-Clink-arg=-fuse-ld=mold"
                      cross: false
                      ext: ""

                    - target: aarch64-unknown-linux-gnu
                      runner: ubuntu-24.04
                      buildflags: ""
                      rustflags: "-Clink-arg=-fuse-ld=mold"
                      cross: true
                      ext: ""

                    - target: x86_64-apple-darwin
                      runner: macos-13
                      buildflags: ""
                      rustflags: ""
                      cross: false
                      ext: ""

                    - target: aarch64-apple-darwin
                      runner: macos-latest
                      buildflags: ""
                      rustflags: ""
                      cross: false
                      ext: ""

                    - target: x86_64-pc-windows-msvc
                      runner: windows-latest
                      buildflags: ""
                      rustflags: ""
                      cross: false
                      ext: ""
        steps:
            - uses: actions/checkout@v4
            - uses: auguwu/git-tag-action@v2
              id: tag

            - run: rm rust-toolchain.toml
            - uses: dtolnay/rust-toolchain@nightly
              with:
                target: ${{matrix.target}}

            - uses: taiki-e/cache-cargo-install-action@v2
              if: matrix.cross
              with:
                tool: cross

            - uses: rui314/setup-mold@v1
              if: matrix.runner == 'ubuntu-24.04'

            - uses: Swatinem/rust-cache@v2
            - run: .ci/windows/Setup.ps1
              if: matrix.runner == 'windows-latest'
              id: vcpkg

            - uses: actions/cache@v4
              if: matrix.runner == 'windows-latest'
              with:
                key: vcpkg-cache
                path: |
                    ${{env.VCPKG_ROOT}}

            - if: matrix.runner == 'windows-latest'
              uses: ilammy/setup-nasm@v1

            - name: Unix Build
              if: matrix.runner != 'windows-latest'
              run: .ci/${{contains(matrix.runner, 'apple-') && 'macos' || 'linux'}}/release
              env:
                BUILDFLAGS: "--target ${{matrix.target}} ${{matrix.buildflags}}"
                CARGOFLAGS: ${{env.CARGOFLAGS}}
                RUSTFLAGS: ${{matrix.rustflags}}
                CARGO: ${{matrix.cross && 'cross' || 'cargo'}}

            - name: Windows Build
              if: matrix.runner == 'windows-latest'
              run: .ci/windows/Release.ps1 -CargoFlags "${{env.CARGOFLAGS}}" -BuildFlags "${{matrix.buildflags}}"

            - uses: softprops/action-gh-release@v2
              with:
                files: ./.result/hazel-*

            - name: "Upload :: S3 (${{steps.tag.outputs.version}})"
              uses: Noelware/s3-action@v2
              with:
                enforce-path-access-style: true
                access-key-id: ${{secrets.S3_ACCESS_KEY}}
                path-format: "$(prefix)/hazel/${{steps.tag.outputs.version}}/$(file)"
                directories: .result
                secret-key: ${{secrets.S3_SECRET_KEY}}
                endpoint: ${{secrets.S3_ENDPOINT}}
                prefix: /artifacts
                region: us-east-1
                bucket: noelware

            - name: "Upload :: S3 (latest)"
              uses: Noelware/s3-action@v2
              with:
                enforce-path-access-style: true
                access-key-id: ${{secrets.S3_ACCESS_KEY}}
                path-format: "$(prefix)/hazel/latest/$(file)"
                directories: .result
                secret-key: ${{secrets.S3_SECRET_KEY}}
                endpoint: ${{secrets.S3_ENDPOINT}}
                prefix: /artifacts
                region: us-east-1
                bucket: noelware
    nix-build:
        name: "Build / Nix"
        runs-on: ubuntu-24.04
        if: github.repository == 'Noelware/hazel'
        steps:
            - uses: actions/checkout@v4
            - uses: cachix/install-nix-action@v31
              with:
                nix_path: nixpkgs=channel:nixos-unstable

            - uses: cachix/cachix-action@v16
              with:
                name: noelware
                authToken: ${{secrets.CACHIX_AUTH_TOKEN}}

            - run: nix build .#hazel
    docker:
        name: "Docker / Build [${{matrix.kind}} (${{matrix.arch}})]"
        runs-on: ubuntu-24.04
        if: github.repository == 'Noelware/hazel'
        outputs:
            docker-meta: ${{steps.meta.outputs.json}}
        strategy:
            fail-fast: true
            matrix:
                kind: [alpine, debian]
                arch: [x86_64, aarch64]
        steps:
            - uses: actions/checkout@v4
            - uses: auguwu/git-tag-action@v2
              id: tag
            - id: commit-hash
              run: echo "commit=$(git rev-parse --short=8 $GITHUB_SHA)" >> $GITHUB_OUTPUT

            - uses: docker/setup-buildx-action@v3
            - uses: docker/login-action@v3
              with:
                registry: cr.noelware.cloud
                username: noelbot
                password: ${{secrets.NOEL_REGISTRY_PASSWORD}}

            - uses: docker/metadata-action@v5
              id: meta
              with:
                flavor: |
                    latest=true
                    suffix=${{matrix.kind == 'alpine' && 'alpine-' || ''}}${{matrix.arch == 'aarch64' && 'arm64' || 'amd64'}}
                tags: |
                    type=semver,pattern={{version}}
                    type=semver,pattern={{major}}.{{minor}}
                    type=semver,pattern={{major}}
                images: |
                    cr.noelware.cloud/noelware/hazel
                labels: |
                    org.opencontainers.image.title=Hazel
                    org.opencontainers.image.description="ðŸª¶ Easy to use read-only proxy to map objects to URLs"
                    org.opencontainers.image.version=${{steps.tag.outputs.version}}
                    org.opencontainers.image.revision=${{steps.commit-hash.outputs.commit}}
                    org.opencontainers.image.licenses=Apache-2.0
                    org.opencontainers.image.documentation=https://docs.noelware.org/hazel/${{steps.tag.outputs.version}}
                    org.opencontainers.image.source=https://github.com/Noelware/hazel/tree/${{steps.commit-hash.outputs.commit}}

            - uses: docker/bake-action@v6
              with:
                targets: ${{matrix.kind}}-${{matrix.arch}}
                provenance: true
                push: true
                files: |
                    ./docker-bake.hcl
                    cwd://${{steps.meta.outputs.bake-file}}

    manifests:
        name: "Docker / Manifests"
        runs-on: ubuntu-24.04
        if: github.repository == 'Noelware/hazel'
        needs: [docker]
        steps:
            - uses: auguwu/git-tag-action@v2
              id: tag
            - uses: docker/setup-buildx-action@v3
            - uses: docker/login-action@v3
              with:
                registry: cr.noelware.cloud
                username: noelbot
                password: ${{secrets.NOEL_REGISTRY_PASSWORD}}

            - name: "Merge (cr.noelware.cloud/noelware/hazel:latest)"
              uses: Noelware/docker-manifest-action@v1
              with:
                inputs: cr.noelware.cloud/noelware/hazel:latest-amd64,cr.noelware.cloud/noelware/hazel:latest-arm64
                tags: cr.noelware.cloud/noelware/hazel:latest

            - name: "Merge (cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.version}})"
              uses: Noelware/docker-manifest-action@v1
              with:
                inputs: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.version}}-amd64,cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.version}}-arm64
                tags: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.version}}

            - name: "Merge (cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}})"
              uses: Noelware/docker-manifest-action@v1
              with:
                inputs: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}-amd64,cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}-arm64
                tags: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}

            - name: "Merge (cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}})"
              uses: Noelware/docker-manifest-action@v1
              with:
                inputs: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-amd64,cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-arm64
                tags: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}

            - name: "Merge (cr.noelware.cloud/noelware/hazel:alpine)"
              uses: Noelware/docker-manifest-action@v1
              with:
                inputs: cr.noelware.cloud/noelware/hazel:alpine-amd64,cr.noelware.cloud/noelware/hazel:alpine-arm64
                tags: cr.noelware.cloud/noelware/hazel:alpine

            - name: "Merge (cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.version}}-alpine)"
              uses: Noelware/docker-manifest-action@v1
              with:
                inputs: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.version}}-alpine-amd64,cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.version}}-alpine-arm64
                tags: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.version}}-alpine

            - name: "Merge (cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}-alpine)"
              uses: Noelware/docker-manifest-action@v1
              with:
                inputs: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}-alpine-amd64,cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}-alpine-arm64
                tags: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}-alpine

            - name: "Merge (cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-alpine)"
              uses: Noelware/docker-manifest-action@v1
              with:
                inputs: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-alpine-amd64,cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-alpine-arm64
                tags: cr.noelware.cloud/noelware/hazel:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-alpine
    # sentry:
    #     name: Sentry
    #     runs-on: ubuntu-24.04
    #     if: github.repository == 'Noelware/hazel'
    #     steps:
    #         - uses: auguwu/git-tag-action@v2
    #           id: tag
    #         - uses: getsentry/action-release@v3
    #           env:
    #             SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
    #             SENTRY_PROJECT: hazel
    #             SENTRY_URL: https://sentry.noelware.org
    #           with:
    #             environment: production
    #             release: ${{steps.tag.outputs.version}}
